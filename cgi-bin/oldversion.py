import sys
import os
import WebscraperUtilities
from androidApp import androidApp
from flask import Flask, request
import cgi, cgitb

global parameter
parameter = cgi.FieldStorage()
print(parameter)

#cgitb.enable()
#app = Flask(__name__)

#@app.route('/search', methods=['GET'])
def main():
    toolFile = parameter['toolFile'].value
    toolKeywords = WebscraperUtilities.getKeywords(toolFile)
    global appList
    appList = []

    for keyword in toolKeywords:
        pageNumber = 1
        requestString = "http://www.oldversion.com/search?query=" + keyword + "&page=" + str(pageNumber)
        bs = WebscraperUtilities.getBeautifulSoupWebsiteSource(requestString)
        while(not is500ErrorOrNoResults(bs)):
            addAllApps(bs)
            pageNumber = pageNumber + 1
            requestString = "http://www.oldversion.com/search?query=" + keyword + "&page=" + str(pageNumber)
            bs = WebscraperUtilities.getBeautifulSoupWebsiteSource(requestString)
        
        WebscraperUtilities.writeJsonFile(toolFile, os.path.basename(__file__), appList)

def addAllApps(bs):
    appTableRows = getAppTableRows(bs)
    for row in appTableRows:
        try:
            aTag = row.find("h3").find("a", href=True)
            appLink = "www.oldversion.com" + aTag['href']
            currentApp = androidApp(aTag.get_text(), appLink)
            addAppInfo(currentApp)
            appList.append(currentApp)
        except:
            pass

def getAppTableRows(bs):
    try:
        tableRows = bs.findAll("tr", {"class" : "b-software-list-item"})
        return tableRows[1:]
    except:
        return []

def addAppInfo(app):
    appBs = WebscraperUtilities.getBeautifulSoupWebsiteSource("http://" + app.link)
    appAuthor = appBs.find("div", {"class" : "column flR meta-data"}).findAll("li")[1].find("span").get_text()
    appDescription = appBs.find("div", {"class" : "description"}).find("p").get_text()
    app.setAuthor(appAuthor)
    app.setDescription(appDescription)
    addAppVersions(appBs, app)

def addAppVersions(bs, app):
    versionRows = bs.find("tbody").findAll("tr")
    versionRowsATag = []
    for row in versionRows:
        versionRowsATag.append(row.find("td", {"class" : "version"}).find("a", href=True))
    for aTag in versionRowsATag:
        app.addVersion(aTag.get_text(), "http://www.oldversion.com" + aTag['href'])

def is500ErrorOrNoResults(bs):
    fiveHundredError = bs.find("div", {"id" : "container"}).find("h1").get_text() == "Oops! An Error Occurred"
    try:
        noResults = bs.findAll("td", {"class" : "category-programs-list_ads"})[1].find("h3").get_text() == "No results found"
    except:
        noResults = False
    if(fiveHundredError or noResults):
        return True
    return False

def getKeywords(keywordFile):
    assert keywordFile == None
    keywordFile = "/keywords/" + keywordFile
    keywordList = []
    with open(keywordFile, 'r') as file:
        for line in file.readlines():
            keywordList.append(line.strip('\n'))
    return keywordList

if __name__ == '__main__':
    main()